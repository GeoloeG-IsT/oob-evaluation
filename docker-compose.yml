
services:
  # PostgreSQL Database
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ml_eval_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_eval_platform
      - REDIS_URL=redis://redis:6379/0
      - BACKEND_URL=http://backend:8000
      - FRONTEND_URL=http://frontend:3000
    volumes:
      - ./data/models:/app/data/models
      - ./data/images:/app/data/images
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Workers
  celery-training:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    command: celery -A src.celery_app worker --loglevel=info --queue=training --concurrency=1
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_eval_platform
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data/models:/app/data/models
      - ./data/images:/app/data/images
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-inference:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    command: celery -A src.celery_app worker --loglevel=info --queue=inference --concurrency=2
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_eval_platform
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data/models:/app/data/models
      - ./data/images:/app/data/images
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-evaluation:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    command: celery -A src.celery_app worker --loglevel=info --queue=evaluation --concurrency=1
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_eval_platform
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data/models:/app/data/models
      - ./data/images:/app/data/images
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-deployment:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    command: celery -A src.celery_app worker --loglevel=info --queue=deployment --concurrency=1
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/ml_eval_platform
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data/models:/app/data/models
      - ./data/images:/app/data/images
    depends_on:
      - db
      - redis
    restart: unless-stopped

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped

  # Celery Flower (monitoring)
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.celery
    command: celery -A src.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: