# Cloud Build configuration for Celery workers
steps:
  # Build Docker image for Celery workers
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-celery-image'
    args: [
      'build',
      '-f', 'docker/Dockerfile.celery.prod',
      '-t', 'gcr.io/$PROJECT_ID/ml-eval-celery:$SHORT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/ml-eval-celery:latest',
      '--build-arg', 'BUILD_ENV=production',
      '.'
    ]
    timeout: '1500s'  # ML dependencies take longer to build

  # Security scan
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'vulnerability-scan'
    args: [
      'container', 'images', 'scan',
      'gcr.io/$PROJECT_ID/ml-eval-celery:$SHORT_SHA',
      '--format=json'
    ]
    waitFor: ['build-celery-image']

  # Push images
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-celery-image'
    args: [
      'push', 'gcr.io/$PROJECT_ID/ml-eval-celery:$SHORT_SHA'
    ]
    waitFor: ['vulnerability-scan']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-celery-latest'
    args: [
      'push', 'gcr.io/$PROJECT_ID/ml-eval-celery:latest'
    ]
    waitFor: ['vulnerability-scan']

  # Deploy Training Workers
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'prepare-training-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Replace placeholders in training worker config
        sed -i "s/PROJECT_ID/$PROJECT_ID/g" deployment/cloud-run/celery-training-service.yaml
        sed -i "s/REGION/$_REGION/g" deployment/cloud-run/celery-training-service.yaml
        sed -i "s/TAG/$SHORT_SHA/g" deployment/cloud-run/celery-training-service.yaml
        
        echo "Training worker configuration:"
        cat deployment/cloud-run/celery-training-service.yaml
    waitFor: ['push-celery-image']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-training-workers'
    args: [
      'run', 'services', 'replace',
      'deployment/cloud-run/celery-training-service.yaml',
      '--region=$_REGION'
    ]
    waitFor: ['prepare-training-config']

  # Deploy Inference Workers
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'prepare-inference-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Replace placeholders in inference worker config
        sed -i "s/PROJECT_ID/$PROJECT_ID/g" deployment/cloud-run/celery-inference-service.yaml
        sed -i "s/REGION/$_REGION/g" deployment/cloud-run/celery-inference-service.yaml
        sed -i "s/TAG/$SHORT_SHA/g" deployment/cloud-run/celery-inference-service.yaml
        
        echo "Inference worker configuration:"
        cat deployment/cloud-run/celery-inference-service.yaml
    waitFor: ['push-celery-image']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-inference-workers'
    args: [
      'run', 'services', 'replace',
      'deployment/cloud-run/celery-inference-service.yaml',
      '--region=$_REGION'
    ]
    waitFor: ['prepare-inference-config']

  # Deploy Evaluation Workers
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'prepare-evaluation-config'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Replace placeholders in evaluation worker config
        sed -i "s/PROJECT_ID/$PROJECT_ID/g" deployment/cloud-run/celery-evaluation-service.yaml
        sed -i "s/REGION/$_REGION/g" deployment/cloud-run/celery-evaluation-service.yaml
        sed -i "s/TAG/$SHORT_SHA/g" deployment/cloud-run/celery-evaluation-service.yaml
        
        echo "Evaluation worker configuration:"
        cat deployment/cloud-run/celery-evaluation-service.yaml
    waitFor: ['push-celery-image']

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-evaluation-workers'
    args: [
      'run', 'services', 'replace',
      'deployment/cloud-run/celery-evaluation-service.yaml',
      '--region=$_REGION'
    ]
    waitFor: ['prepare-evaluation-config']

  # Health checks for all worker types
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'verify-deployments'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîç Verifying Celery worker deployments..."
        
        # Wait for services to be ready
        sleep 60
        
        # Check training workers
        echo "Checking training workers..."
        gcloud run services describe ml-eval-celery-training --region=$_REGION --format='value(status.conditions[0].type,status.conditions[0].status)'
        
        # Check inference workers  
        echo "Checking inference workers..."
        gcloud run services describe ml-eval-celery-inference --region=$_REGION --format='value(status.conditions[0].type,status.conditions[0].status)'
        
        # Check evaluation workers
        echo "Checking evaluation workers..."
        gcloud run services describe ml-eval-celery-evaluation --region=$_REGION --format='value(status.conditions[0].type,status.conditions[0].status)'
        
        echo "‚úÖ All Celery workers deployed successfully"
    waitFor: ['deploy-training-workers', 'deploy-inference-workers', 'deploy-evaluation-workers']

  # Test worker connectivity (if Redis is accessible)
  - name: 'python:3.11-slim'
    id: 'test-worker-connectivity'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        pip install celery redis
        
        echo "üß™ Testing Celery worker connectivity..."
        
        # Note: This would require Redis access from Cloud Build
        # In a real deployment, you might want to run this from within the VPC
        echo "Worker connectivity test completed (would require VPC access)"
        
        echo "‚úÖ Celery workers deployment verification completed"
    waitFor: ['verify-deployments']

# Build options optimized for ML workloads
options:
  # Use larger machine for ML dependency builds
  machineType: 'E2_HIGHCPU_32'
  diskSizeGb: 200
  env:
    - 'DOCKER_BUILDKIT=1'
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON

# Substitutions
substitutions:
  _REGION: 'us-central1'

# Extended timeout for ML builds
timeout: '2400s'  # 40 minutes

# Service account
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/ml-eval-cloudbuild@$PROJECT_ID.iam.gserviceaccount.com'

# Tags
tags:
  - 'celery'
  - 'ml-workers'
  - 'production'
  - 'ml-eval-platform'